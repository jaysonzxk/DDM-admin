{"remainingRequest":"/Users/mac/Desktop/DDM-admin/node_modules/babel-loader/lib/index.js!/Users/mac/Desktop/DDM-admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mac/Desktop/DDM-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mac/Desktop/DDM-admin/src/views/admin/monitor/server/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/mac/Desktop/DDM-admin/src/views/admin/monitor/server/index.vue","mtime":1702065174000},{"path":"/Users/mac/Desktop/DDM-admin/babel.config.js","mtime":1702065174000},{"path":"/Users/mac/Desktop/DDM-admin/node_modules/cache-loader/dist/cjs.js","mtime":1703645363792},{"path":"/Users/mac/Desktop/DDM-admin/node_modules/babel-loader/lib/index.js","mtime":1703645364828},{"path":"/Users/mac/Desktop/DDM-admin/node_modules/cache-loader/dist/cjs.js","mtime":1703645363792},{"path":"/Users/mac/Desktop/DDM-admin/node_modules/vue-loader/lib/index.js","mtime":1703645365038}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICIvVXNlcnMvbWFjL0Rlc2t0b3AvRERNLWFkbWluL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnZhbHVlcy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmpzb24uc3RyaW5naWZ5LmpzIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IGNsZWFuTW9uaXRvckxvZywgZ2V0TW9uaXRvckxvZ3MsIGdldE1vbml0b3JTdGF0dXNJbmZvLCBnZXRTZXJ2ZXJMYXRlc3RMb2csIGdldFNlcnZlckxpc3QgYXMgX2dldFNlcnZlckxpc3QsIHVwZGF0ZU1vbml0b3JTdGF0dXNJbmZvLCB1cGRhdGVTZXJ2ZXJJbmZvIGFzIF91cGRhdGVTZXJ2ZXJJbmZvIH0gZnJvbSAiQC9hcGkvYWRtaW4vbW9uaXRvci9zZXJ2ZXIiOwppbXBvcnQgSW5zdHJ1bWVudEJvYXJkIGZyb20gIkAvdmlld3MvYWRtaW4vbW9uaXRvci9zZXJ2ZXIvY29tcG9uZW50cy9JbnN0cnVtZW50Qm9hcmQiOwppbXBvcnQgTGluZUNoYXJ0IGZyb20gIkAvdmlld3MvYWRtaW4vbW9uaXRvci9zZXJ2ZXIvY29tcG9uZW50cy9MaW5lQ2hhcnQiOwppbXBvcnQgbW9tZW50IGZyb20gIm1vbWVudCI7CnZhciBkZWJvdW5jZSA9IHJlcXVpcmUoImxvZGFzaC9kZWJvdW5jZSIpOwoKLy8g6KaB5bGV56S655qE5L+h5oGv77yMa2V5IC0+IG5hbWUKdmFyIFNFUlZFUl9LRVlfVE9fTkFNRV9NQVBQSU5HID0gewogIGlwOiAi5pyN5Yqh5ZmoSVAiLAogIG5hbWU6ICLmnI3liqHlmajlkI3np7AiLAogIG9zOiAi5pON5L2c57O757ufIiwKICByZW1hcms6ICLlpIfms6giCn07CgovLyDmm7TmlrDpopHnjofnsbvlnovmmKDlsIQKdmFyIElOVEVSVkFMX0lEX1RPX1RZUEVfTUFQUElORyA9IHsKICAwOiB7CiAgICB0eXBlOiAwLAogICAgbmFtZTogIuenkiIsCiAgICBrZXk6ICJzZWNvbmRzIiwKICAgIHNlY29uZDogMQogIH0sCiAgMTogewogICAgdHlwZTogMSwKICAgIG5hbWU6ICLliIbpkp8iLAogICAga2V5OiAibWludXRlcyIsCiAgICBzZWNvbmQ6IDYwCiAgfSwKICAyOiB7CiAgICB0eXBlOiAyLAogICAgbmFtZTogIuWwj+aXtiIsCiAgICBrZXk6ICJob3VycyIsCiAgICBzZWNvbmQ6IDYwICogNjAKICB9LAogIDM6IHsKICAgIHR5cGU6IDMsCiAgICBuYW1lOiAi5aSpIiwKICAgIGtleTogImRheXMiLAogICAgc2Vjb25kOiAyNCAqIDYwICogNjAKICB9Cn07CnZhciBkZWZhdWx0VXBkYXRlSW50ZXJ2YWwgPSBJTlRFUlZBTF9JRF9UT19UWVBFX01BUFBJTkdbIjAiXTsKCi8vIOWbvuihqOWtl+auteaYoOWwhAp2YXIgQ0hBUlRfS0VZX05BTUVfTUFQUElORyA9IHsKICBjcHU6ICJDUFUiLAogIG1lbW9yeTogIuWGheWtmCIsCiAgZGlzazogIuejgeebmCIKfTsKCi8vIOS7quihqOebmOWtl+auteaYoOWwhAp2YXIgSU5TVFJVTUVOVF9CT0FSRF9LRVlfVE9fTkFNRV9NQVBQSU5HID0gewogIGNwdTogIkNQVeS9v+eUqOeOhyIsCiAgbWVtb3J5OiAi5YaF5a2Y5L2/55So546HIgp9OwoKLy8g5pyN5Yqh5Zmo5L+h5oGv5Y+v5L+u5pS55a2X5q61CnZhciBDSEFOR0VBQkxFX1NFUlZFUl9GSUVMRFMgPSBbIm5hbWUiLCAicmVtYXJrIl07CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiU2VydmVyIiwKICBjb21wb25lbnRzOiB7CiAgICBJbnN0cnVtZW50Qm9hcmQ6IEluc3RydW1lbnRCb2FyZCwKICAgIExpbmVDaGFydDogTGluZUNoYXJ0CiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgU0VSVkVSX0tFWV9UT19OQU1FX01BUFBJTkc6IFNFUlZFUl9LRVlfVE9fTkFNRV9NQVBQSU5HLAogICAgICBJTlRFUlZBTF9JRF9UT19UWVBFX01BUFBJTkc6IElOVEVSVkFMX0lEX1RPX1RZUEVfTUFQUElORywKICAgICAgQ0hBUlRfS0VZX05BTUVfTUFQUElORzogQ0hBUlRfS0VZX05BTUVfTUFQUElORywKICAgICAgQ0hBTkdFQUJMRV9TRVJWRVJfRklFTERTOiBDSEFOR0VBQkxFX1NFUlZFUl9GSUVMRFMsCiAgICAgIElOU1RSVU1FTlRfQk9BUkRfS0VZX1RPX05BTUVfTUFQUElORzogSU5TVFJVTUVOVF9CT0FSRF9LRVlfVE9fTkFNRV9NQVBQSU5HLAogICAgICB0aW1lUmFuZ2U6IFsiIi5jb25jYXQobW9tZW50KCkuZm9ybWF0KCJZWVlZLU1NLUREIiksICIgMDA6MDA6MDAiKSwgIiIuY29uY2F0KG1vbWVudCgpLmZvcm1hdCgiWVlZWS1NTS1ERCIpLCAiIDIzOjU5OjU5IildLAogICAgICAvLyDliqDovb3lsYLkv6Hmga8KICAgICAgbG9hZGluZzogW10sCiAgICAgIC8vIOaJgOacieacjeWKoeWZqOS/oeaBrwogICAgICBhbGxTZXJ2ZXJJbmZvOiBbXSwKICAgICAgLy8g5b2T5YmN5bGV56S655qE5pyN5Yqh5Zmo5ZCN56ewCiAgICAgIGN1cnJlbnRTZXJ2ZXJOYW1lOiAiIiwKICAgICAgLy8g5b2T5YmN5bGV56S655qE5pyN5Yqh5Zmo5L+h5oGvCiAgICAgIGN1cnJlbnRTZXJ2ZXI6IHt9LAogICAgICAvLyDlvZPliY3lsZXnpLrnmoTmnI3liqHlmajkv6Hmga/ntKLlvJXvvIzmm7TmlrDmnI3liqHlmajkv6Hmga/ml7bnlKgKICAgICAgY3VycmVudFNlcnZlckluZGV4OiAwLAogICAgICAvLyDlvIDlkK/nm5HmjqfmjqfliLbmjInpkq4KICAgICAgaXNPcGVuaW5nTW9uaXRvcjogZmFsc2UsCiAgICAgIC8vIOaVsOaNruabtOaWsOmikeeOhwogICAgICBtb25pdG9yVXBkYXRlSW50ZXJ2YWw6IDYwLAogICAgICAvLyDmnIDlsI/mm7TmlrDpopHnjoflgLwKICAgICAgbWluTW9uaXRvclVwZGF0ZUludGVydmFsOiAwLAogICAgICAvLyDmm7TmlrDpopHnjofnsbvlnosKICAgICAgaW50ZXJ2YWxUeXBlOiBkZWZhdWx0VXBkYXRlSW50ZXJ2YWwubmFtZSwKICAgICAgLy8g5pu05paw6aKR546H5Y2V5L2N5a+55bqU56eSCiAgICAgIGludGVydmFsVHlwZVVuaXRzOiBkZWZhdWx0VXBkYXRlSW50ZXJ2YWwuc2Vjb25kLAogICAgICAvLyDnm5Hmjqfml6Xlv5fkv53lrZjlpKnmlbAKICAgICAgbW9uaXRvckxvZ1NhdmluZ0RheXM6IDMwLAogICAgICAvLyDmipjnur/lm77mlbDmja4KICAgICAgbGluZUNoYXJ0RGF0YToge30sCiAgICAgIC8vIOS7quihqOebmOaVsOaNrgogICAgICBpbnN0cnVtZW50Qm9hcmREYXRhOiB7fQogICAgfTsKICB9LAogIGNvbXB1dGVkOiB7CiAgICBjdXJyZW50U2VydmVySW5mb0tleXM6IGZ1bmN0aW9uIGN1cnJlbnRTZXJ2ZXJJbmZvS2V5cygpIHsKICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuY3VycmVudFNlcnZlcikuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBpZiAoU0VSVkVSX0tFWV9UT19OQU1FX01BUFBJTkdba2V5XSkgewogICAgICAgICAgcmV0dXJuIF9kZWZpbmVQcm9wZXJ0eSh7fSwga2V5LCBTRVJWRVJfS0VZX1RPX05BTUVfTUFQUElOR1trZXldKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIGludGVydmFsTmFtZVRvU2Vjb25kTWFwcGluZzogZnVuY3Rpb24gaW50ZXJ2YWxOYW1lVG9TZWNvbmRNYXBwaW5nKCkgewogICAgICB2YXIgaW50ZXJ2YWxOYW1lVG9TZWNvbmRNYXBwaW5nID0ge307CiAgICAgIE9iamVjdC52YWx1ZXMoSU5URVJWQUxfSURfVE9fVFlQRV9NQVBQSU5HKS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgaW50ZXJ2YWxOYW1lVG9TZWNvbmRNYXBwaW5nW2l0ZW0ubmFtZV0gPSBpdGVtLnNlY29uZDsKICAgICAgfSk7CiAgICAgIHJldHVybiBpbnRlcnZhbE5hbWVUb1NlY29uZE1hcHBpbmc7CiAgICB9LAogICAgbW9uaXRvclN0YXR1c0luZm86IGZ1bmN0aW9uIG1vbml0b3JTdGF0dXNJbmZvKCkgewogICAgICByZXR1cm4gewogICAgICAgIGVuYWJsZWQ6IHRoaXMuaXNPcGVuaW5nTW9uaXRvciA/IDEgOiAwLAogICAgICAgIHNhdmVfZGF5czogdGhpcy5tb25pdG9yTG9nU2F2aW5nRGF5cywKICAgICAgICBpbnRlcnZhbDogdGhpcy5tb25pdG9yVXBkYXRlSW50ZXJ2YWwgKiB0aGlzLmludGVydmFsVHlwZVVuaXRzCiAgICAgIH07CiAgICB9CiAgfSwKICB3YXRjaDogewogICAgY3VycmVudFNlcnZlcjogZnVuY3Rpb24gY3VycmVudFNlcnZlcihuZXdTZXJ2ZXJJbmZvKSB7CiAgICAgIGlmIChuZXdTZXJ2ZXJJbmZvKSB7CiAgICAgICAgLy8g5pu05paw5pyA5paw55uR5o6n5L+h5oGvCiAgICAgICAgdGhpcy5nZXRTZXJ2ZXJMYXRlc3RMb2dJbmZvKG5ld1NlcnZlckluZm8uaWQpOwogICAgICAgIC8vIOiOt+WPluebkeaOp+aXpeW/l+S/oeaBrwogICAgICAgIHRoaXMuZ2V0Q3VycmVudFNlcnZlck1vbml0b3JMb2dzKCk7CiAgICAgIH0KICAgIH0KICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICB0aGlzLm9wZW5Mb2FkaW5nKCk7CiAgICAvLyDojrflj5bmiYDmnInmnI3liqHlmajkv6Hmga8KICAgIHRoaXMuZ2V0U2VydmVyTGlzdCh0aGlzLmN1cnJlbnRTZXJ2ZXJJbmRleCk7CiAgICAvLyDojrflj5bmnI3liqHlmajnm5HmjqfpopHnjoforr7nva4KICAgIHRoaXMuZ2V0TW9uaXRvclN0YXR1c1NldHRpbmdzSW5mbygpOwogIH0sCiAgbWV0aG9kczogewogICAgLyoqIOafpeivouaJgOacieacjeWKoeWZqOWfuuehgOS/oeaBryAqL2dldFNlcnZlckxpc3Q6IGZ1bmN0aW9uIGdldFNlcnZlckxpc3Qoc2VydmVySW5kZXgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgX2dldFNlcnZlckxpc3QoewogICAgICAgIHBhZ2VOdW06ICJhbGwiCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgX3RoaXMuYWxsU2VydmVySW5mbyA9IHJlc3BvbnNlLmRhdGE7CiAgICAgICAgaWYgKF90aGlzLmFsbFNlcnZlckluZm8ubGVuZ3RoID4gMCkgewogICAgICAgICAgX3RoaXMuY3VycmVudFNlcnZlciA9IF90aGlzLmFsbFNlcnZlckluZm9bc2VydmVySW5kZXggfHwgX3RoaXMuY3VycmVudFNlcnZlckluZGV4XTsKICAgICAgICAgIF90aGlzLmN1cnJlbnRTZXJ2ZXJOYW1lID0gX3RoaXMuY3VycmVudFNlcnZlci5uYW1lIHx8IF90aGlzLmN1cnJlbnRTZXJ2ZXIuaXA7CiAgICAgICAgfQogICAgICAgIF90aGlzLmxvYWRpbmcuY2xvc2UoKTsKICAgICAgfSk7CiAgICB9LAogICAgLyoqIOS/ruaUueacjeWKoeWZqOS/oeaBryovdXBkYXRlU2VydmVySW5mbzogZnVuY3Rpb24gdXBkYXRlU2VydmVySW5mbygpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CiAgICAgIF91cGRhdGVTZXJ2ZXJJbmZvKHRoaXMuY3VycmVudFNlcnZlci5pZCwgdGhpcy5jdXJyZW50U2VydmVyKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICBfdGhpczIubXNnU3VjY2Vzcygi5L+u5pS55pyN5Yqh5Zmo5L+h5oGv5oiQ5Yqf77yBIik7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgIF90aGlzMi4kbWVzc2FnZS5lcnJvcihlcnJvci5tc2cgfHwgIuaPkOS6pOS/ruaUueacjeWKoeWZqOS/oeaBr+WHuumUme+8gSIpOwogICAgICB9KS5maW5hbGx5KGZ1bmN0aW9uICgpIHsKICAgICAgICBfdGhpczIuZ2V0U2VydmVyTGlzdCgpOwogICAgICB9KTsKICAgIH0sCiAgICAvKiog6I635Y+W5pyN5Yqh5Zmo5pyA5paw55uR5o6n5L+h5oGvICovZ2V0U2VydmVyTGF0ZXN0TG9nSW5mbzogZnVuY3Rpb24gZ2V0U2VydmVyTGF0ZXN0TG9nSW5mbyhzZXJ2ZXJJZCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKICAgICAgZ2V0U2VydmVyTGF0ZXN0TG9nKHNlcnZlcklkKS50aGVuKGZ1bmN0aW9uIChyZXN1bHRzKSB7CiAgICAgICAgX3RoaXMzLmluc3RydW1lbnRCb2FyZERhdGEgPSByZXN1bHRzLmRhdGE7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgIF90aGlzMy5tc2dFcnJvcihlcnJvci5tc2cgfHwgIuiOt+WPluacjeWKoeWZqOacgOaWsOebkeaOp+S/oeaBr+mUmeivr++8gSIpOwogICAgICB9KTsKICAgIH0sCiAgICAvKiog6I635Y+W55uR5o6n5pel5b+X5L+h5oGvICovZ2V0Q3VycmVudFNlcnZlck1vbml0b3JMb2dzOiBmdW5jdGlvbiBnZXRDdXJyZW50U2VydmVyTW9uaXRvckxvZ3MoKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwogICAgICBnZXRNb25pdG9yTG9ncyh0aGlzLmN1cnJlbnRTZXJ2ZXIuaWQsIHsKICAgICAgICBhczogSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgImNyZWF0ZV9kYXRldGltZV9fcmFuZ2UiOiB0aGlzLnRpbWVSYW5nZQogICAgICAgIH0pCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdHMpIHsKICAgICAgICBfdGhpczQubGluZUNoYXJ0RGF0YSA9IHJlc3VsdHMuZGF0YTsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgX3RoaXM0Lm1zZ0Vycm9yKGVycm9yLm1zZyB8fCAi6I635Y+W55uR5o6n5pel5b+X5L+h5oGv5Ye66ZSZ6K+v77yBIik7CiAgICAgIH0pOwogICAgfSwKICAgIC8qKiDmuIXpmaTnm5Hmjqfml6Xlv5cgKi9jbGVhbk1vbml0b3JMb2dzSW5mbzogZnVuY3Rpb24gY2xlYW5Nb25pdG9yTG9nc0luZm8oKSB7CiAgICAgIHZhciBfdGhpczUgPSB0aGlzOwogICAgICB0aGlzLiRjb25maXJtKCLmraTmk43kvZzlsIbliKDpmaTmiYDmnInnmoTnm5HmjqforrDlvZXvvIzmmK/lkKbnu6fnu63vvJ8iLCAi5o+Q56S6IiwgewogICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAi56Gu5a6a5Yig6ZmkIiwKICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiAi5pS+5byDIgogICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICBjbGVhbk1vbml0b3JMb2coKS50aGVuKGZ1bmN0aW9uIChyZXN1bHRzKSB7CiAgICAgICAgICBfdGhpczUubXNnU3VjY2Vzcygi5riF6Zmk6K6w5b2V5oiQ5Yqf77yBIik7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICBfdGhpczUuJG1lc3NhZ2Uud2FybmluZyhlcnJvci5tc2cgfHwgIua4hemZpOiusOW9leWksei0pe+8jOivt+mHjeivle+8gSIpOwogICAgICAgIH0pOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7fSk7CiAgICB9LAogICAgLyoqIOiOt+WPluebkeaOp+mFjee9ruS/oeaBryAqL2dldE1vbml0b3JTdGF0dXNTZXR0aW5nc0luZm86IGZ1bmN0aW9uIGdldE1vbml0b3JTdGF0dXNTZXR0aW5nc0luZm8oKSB7CiAgICAgIHZhciBfdGhpczYgPSB0aGlzOwogICAgICBnZXRNb25pdG9yU3RhdHVzSW5mbygpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdHMpIHsKICAgICAgICB2YXIgX3Jlc3VsdHMkZGF0YSA9IHJlc3VsdHMuZGF0YSwKICAgICAgICAgIGVuYWJsZWQgPSBfcmVzdWx0cyRkYXRhLmVuYWJsZWQsCiAgICAgICAgICBpbnRlcnZhbCA9IF9yZXN1bHRzJGRhdGEuaW50ZXJ2YWwsCiAgICAgICAgICBzYXZlX2RheXMgPSBfcmVzdWx0cyRkYXRhLnNhdmVfZGF5czsKICAgICAgICBfdGhpczYuaXNPcGVuaW5nTW9uaXRvciA9IGVuYWJsZWQ7CiAgICAgICAgX3RoaXM2Lm1vbml0b3JMb2dTYXZpbmdEYXlzID0gcGFyc2VJbnQoc2F2ZV9kYXlzKTsKICAgICAgICBfdGhpczYuZm9ybWF0SW50ZXJ2YWwocGFyc2VJbnQoaW50ZXJ2YWwpKTsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgX3RoaXM2Lm1zZ0Vycm9yKGVycm9yLm1zZyB8fCAi6I635Y+W5pyN5Yqh5Zmo55uR5o6n6YWN572u5L+h5oGv5Ye66ZSZ6K+v77yBIik7CiAgICAgIH0pOwogICAgfSwKICAgIC8qKiDmm7TmlrDnm5HmjqfphY3nva7kv6Hmga8gKi91cGRhdGVNb25pdG9yU3RhdHVzU2V0dGluZ3NJbmZvOiBmdW5jdGlvbiB1cGRhdGVNb25pdG9yU3RhdHVzU2V0dGluZ3NJbmZvKCkgewogICAgICB2YXIgX3RoaXM3ID0gdGhpczsKICAgICAgdXBkYXRlTW9uaXRvclN0YXR1c0luZm8odGhpcy5tb25pdG9yU3RhdHVzSW5mbykudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgX3RoaXM3Lm1zZ1N1Y2Nlc3MoIuabtOaWsOmFjee9ruaIkOWKn++8gSIpOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICBfdGhpczcubXNnRXJyb3IoZXJyb3IubXNnIHx8ICLmm7TmlrDmnI3liqHlmajnm5HmjqfphY3nva7kv6Hmga/lh7rplJnor6/vvIEiKTsKICAgICAgfSk7CiAgICB9LAogICAgLy8g5omT5byA5Yqg6L295bGCCiAgICBvcGVuTG9hZGluZzogZnVuY3Rpb24gb3BlbkxvYWRpbmcoKSB7CiAgICAgIHRoaXMubG9hZGluZyA9IHRoaXMuJGxvYWRpbmcoewogICAgICAgIGxvY2s6IHRydWUsCiAgICAgICAgdGV4dDogIuaLvOWRveivu+WPluS4rSIsCiAgICAgICAgc3Bpbm5lcjogImVsLWljb24tbG9hZGluZyIsCiAgICAgICAgYmFja2dyb3VuZDogInJnYmEoMCwgMCwgMCwgMC43KSIKICAgICAgfSk7CiAgICB9LAogICAgLy8g6YCJ5oup5bGV56S655qE5pyN5Yqh5Zmo5L+h5oGvCiAgICBjaG9vc2VTZXJ2ZXJJbmZvOiBmdW5jdGlvbiBjaG9vc2VTZXJ2ZXJJbmZvKGluZGV4KSB7CiAgICAgIHRoaXMuY3VycmVudFNlcnZlckluZGV4ID0gaW5kZXg7CiAgICAgIHRoaXMuY3VycmVudFNlcnZlciA9IHRoaXMuYWxsU2VydmVySW5mb1tpbmRleF07CiAgICAgIHRoaXMuY3VycmVudFNlcnZlck5hbWUgPSB0aGlzLmN1cnJlbnRTZXJ2ZXIubmFtZSB8fCB0aGlzLmN1cnJlbnRTZXJ2ZXIuaXA7CiAgICB9LAogICAgLy8g5pu05pS55pu05paw6aKR546H77yI5ZGo5pyf77yJ5pWw5YC8CiAgICBoYW5kbGVJbnRlcnZhbENoYW5nZTogZGVib3VuY2UoZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgIHRoaXMubW9uaXRvclVwZGF0ZUludGVydmFsID0gdmFsdWU7CiAgICB9LCA1MDApLAogICAgLy8g6YCJ5oup5pu05paw6aKR546H77yI5ZGo5pyf77yJIOWNleS9jQogICAgc2VsZWN0SW50ZXJ2YWxUeXBlOiBmdW5jdGlvbiBzZWxlY3RJbnRlcnZhbFR5cGUodmFsdWUpIHsKICAgICAgdGhpcy5pbnRlcnZhbFR5cGUgPSB2YWx1ZTsKICAgICAgdGhpcy5pbnRlcnZhbFR5cGVVbml0cyA9IHRoaXMuaW50ZXJ2YWxOYW1lVG9TZWNvbmRNYXBwaW5nW3ZhbHVlXTsKICAgIH0sCiAgICAvLyDkv67mlLnnm5HmjqfnirbmgIEKICAgIGNoYW5nZU1vbml0b3JTdGF0dXM6IGZ1bmN0aW9uIGNoYW5nZU1vbml0b3JTdGF0dXModmFsdWUpIHsKICAgICAgdGhpcy5pc09wZW5pbmdNb25pdG9yID0gdmFsdWU7CiAgICB9LAogICAgLy8g55uR5o6n5ZGo5pyf5pe26Ze06L2s5o2iCiAgICBmb3JtYXRJbnRlcnZhbDogZnVuY3Rpb24gZm9ybWF0SW50ZXJ2YWwoaW50ZXJ2YWxUaW1lKSB7CiAgICAgIHZhciBiaWdnZXJJbnRlcnZhbCA9IDA7CiAgICAgIGZvciAodmFyIF9pID0gMCwgX09iamVjdCR2YWx1ZXMgPSBPYmplY3QudmFsdWVzKElOVEVSVkFMX0lEX1RPX1RZUEVfTUFQUElORyk7IF9pIDwgX09iamVjdCR2YWx1ZXMubGVuZ3RoOyBfaSsrKSB7CiAgICAgICAgdmFyIGludGVydmFsID0gX09iamVjdCR2YWx1ZXNbX2ldOwogICAgICAgIGlmIChpbnRlcnZhbC5zZWNvbmQgPiBiaWdnZXJJbnRlcnZhbCAmJiBpbnRlcnZhbC5zZWNvbmQgPCBpbnRlcnZhbFRpbWUpIHsKICAgICAgICAgIGJpZ2dlckludGVydmFsID0gaW50ZXJ2YWwuc2Vjb25kOwogICAgICAgICAgdGhpcy5tb25pdG9yVXBkYXRlSW50ZXJ2YWwgPSBpbnRlcnZhbFRpbWUgLyBpbnRlcnZhbC5zZWNvbmQ7CiAgICAgICAgICB0aGlzLmludGVydmFsVHlwZSA9IGludGVydmFsLm5hbWU7CiAgICAgICAgICB0aGlzLmludGVydmFsVHlwZVVuaXRzID0gaW50ZXJ2YWwuc2Vjb25kOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KfTs="},{"version":3,"names":["cleanMonitorLog","getMonitorLogs","getMonitorStatusInfo","getServerLatestLog","getServerList","updateMonitorStatusInfo","updateServerInfo","InstrumentBoard","LineChart","moment","debounce","require","SERVER_KEY_TO_NAME_MAPPING","ip","name","os","remark","INTERVAL_ID_TO_TYPE_MAPPING","type","key","second","defaultUpdateInterval","CHART_KEY_NAME_MAPPING","cpu","memory","disk","INSTRUMENT_BOARD_KEY_TO_NAME_MAPPING","CHANGEABLE_SERVER_FIELDS","components","data","timeRange","concat","format","loading","allServerInfo","currentServerName","currentServer","currentServerIndex","isOpeningMonitor","monitorUpdateInterval","minMonitorUpdateInterval","intervalType","intervalTypeUnits","monitorLogSavingDays","lineChartData","instrumentBoardData","computed","currentServerInfoKeys","Object","keys","filter","_defineProperty","intervalNameToSecondMapping","values","forEach","item","monitorStatusInfo","enabled","save_days","interval","watch","newServerInfo","getServerLatestLogInfo","id","getCurrentServerMonitorLogs","created","openLoading","getMonitorStatusSettingsInfo","methods","serverIndex","_this","pageNum","then","response","length","close","_this2","msgSuccess","catch","error","$message","msg","finally","serverId","_this3","results","msgError","_this4","as","JSON","stringify","cleanMonitorLogsInfo","_this5","$confirm","confirmButtonText","cancelButtonText","warning","_this6","_results$data","parseInt","formatInterval","updateMonitorStatusSettingsInfo","_this7","$loading","lock","text","spinner","background","chooseServerInfo","index","handleIntervalChange","value","selectIntervalType","changeMonitorStatus","intervalTime","biggerInterval","_i","_Object$values"],"sources":["src/views/admin/monitor/server/index.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <!-- 监控控制 -->\n    <div class=\"server-monitor-control\">\n      <!-- 监控启用开关 -->\n      <div class=\"control-server-monitor same-block\">\n        开启监控：\n        <el-switch\n          v-model=\"isOpeningMonitor\"\n          active-color=\"#13ce66\"\n          inactive-color=\"#ff4949\"\n          title=\"控制所有监控项\"\n          @change=\"changeMonitorStatus\"\n        />\n      </div>\n      <!-- 更新频率设置 -->\n      <div class=\"monitor-update-interval same-block\">\n        监控频率：\n        <el-input-number\n          v-model=\"monitorUpdateInterval\"\n          label=\"\"\n          class=\"monitor-update-interval-blank\"\n          controls-position=\"right\"\n          :min=\"minMonitorUpdateInterval\"\n          @input=\"handleIntervalChange\"\n        />\n        <el-select\n          v-model=\"intervalType\"\n          class=\"monitor-update-interval-unit\"\n          @change=\"selectIntervalType\"\n        >\n          <el-option\n            v-for=\"item in Object.keys(INTERVAL_ID_TO_TYPE_MAPPING)\"\n            :key=\"INTERVAL_ID_TO_TYPE_MAPPING[item].type\"\n            :label=\"INTERVAL_ID_TO_TYPE_MAPPING[item].name\"\n            :value=\"INTERVAL_ID_TO_TYPE_MAPPING[item].name\"\n          />\n        </el-select>\n\n      </div>\n      <!-- 监控日志保存时间 -->\n      <div class=\"monitor-log-save-time same-block\">\n        保存天数：\n        <el-input v-model=\"monitorLogSavingDays\" class=\" same-block\" style=\"width: 120px;\" />\n        <el-button\n          type=\"primary\"\n          class=\"same-block\"\n          title=\"只有提交更改才会生效\"\n          @click=\"updateMonitorStatusSettingsInfo\"\n        >更改\n        </el-button>\n      </div>\n      <!-- 清空记录 -->\n      <div class=\"clean-monitor-log same-block\">\n        <el-button\n          class=\"same-block\"\n          type=\"warning\"\n          title=\"清空所有监控记录\"\n          @click=\"cleanMonitorLogsInfo\"\n        >清空记录\n        </el-button>\n      </div>\n    </div>\n\n    <div class=\"server-monitor-top\">\n      <!-- 左侧服务器信息 -->\n      <el-card class=\"box-card server-information\">\n        <div slot=\"header\" class=\"clearfix\">\n          <div class=\"server-info-item\">服务器</div>\n          <el-select\n            filterable\n            :value=\"currentServerName\"\n            class=\"server-info-item\"\n            placeholder=\"请选择服务器\"\n            @change=\"chooseServerInfo\"\n          >\n            <el-option\n              v-for=\"(item,index) in allServerInfo\"\n              :key=\"item.id\"\n              :label=\"item.name || item.ip\"\n              :value=\"index\"\n            />\n          </el-select>\n          <el-button\n            type=\"primary\"\n            class=\"server-info-item\"\n            title=\"只有提交更改才会生效\"\n            @click=\"updateServerInfo\"\n          >更改\n          </el-button>\n        </div>\n        <div class=\"server-info-detail\">\n          <div v-for=\"(key,index) in currentServerInfoKeys\" :key=\"index\" class=\"server-info-detail-line text item\">\n            <div class=\"server-info-detail-item\">\n              <div style=\"width: 30%;display: inline-block;\">{{ SERVER_KEY_TO_NAME_MAPPING[key] }}:</div>\n              <div v-if=\"CHANGEABLE_SERVER_FIELDS.indexOf(key) > -1\" style=\"display: inline-block;\">\n                <el-input v-model=\"currentServer[key]\" style=\"display: inline-block; width: 90%;\" />\n              </div>\n              <div v-else style=\"display: inline-block; \"> {{ currentServer[key] }}</div>\n            </div>\n          </div>\n        </div>\n      </el-card>\n\n      <!-- 右侧仪表盘 -->\n      <el-card\n        v-for=\"(key, index) of Object.keys(instrumentBoardData)\"\n        :key=\"`${index}-${key}`\"\n        class=\"box-card information-instrument-panel\"\n      >\n        <instrument-board\n          :show-top-title=\"true\"\n          :show-sub-title=\"true\"\n          :ring-graph-key=\"key\"\n          :instrument-board-data=\"instrumentBoardData[key]\"\n          :top-title-key-to-name-mapping=\"INSTRUMENT_BOARD_KEY_TO_NAME_MAPPING\"\n        />\n      </el-card>\n    </div>\n    <!--  下方折线图  -->\n    <div class=\"server-monitor-bottom\">\n      <!-- 折线图 -->\n      <el-card\n        v-for=\"(key, index) in Object.keys(lineChartData).slice(0,2)\"\n        :key=\"`${index}-${key}`\"\n        class=\"box-card server-monitor-line-chart\"\n      >\n        <line-chart\n          :line-chart-key=\"key\"\n          :server-info=\"currentServer\"\n          :chart-title=\"CHART_KEY_NAME_MAPPING[key]\"\n          :chart-data=\"lineChartData[key]\"\n          :chart-time=\"lineChartData['datetime']\"\n        />\n      </el-card>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {\n  cleanMonitorLog,\n  getMonitorLogs,\n  getMonitorStatusInfo,\n  getServerLatestLog,\n  getServerList,\n  updateMonitorStatusInfo,\n  updateServerInfo\n} from \"@/api/admin/monitor/server\";\nimport InstrumentBoard from \"@/views/admin/monitor/server/components/InstrumentBoard\";\nimport LineChart from \"@/views/admin/monitor/server/components/LineChart\";\nimport moment from \"moment\";\n\nconst debounce = require(\"lodash/debounce\");\n\n// 要展示的信息，key -> name\nconst SERVER_KEY_TO_NAME_MAPPING = {\n  ip: \"服务器IP\",\n  name: \"服务器名称\",\n  os: \"操作系统\",\n  remark: \"备注\"\n};\n\n// 更新频率类型映射\nconst INTERVAL_ID_TO_TYPE_MAPPING = {\n  0: {\n    type: 0,\n    name: \"秒\",\n    key: \"seconds\",\n    second: 1\n  },\n  1: {\n    type: 1,\n    name: \"分钟\",\n    key: \"minutes\",\n    second: 60\n  },\n  2: {\n    type: 2,\n    name: \"小时\",\n    key: \"hours\",\n    second: 60 * 60\n  },\n  3: {\n    type: 3,\n    name: \"天\",\n    key: \"days\",\n    second: 24 * 60 * 60\n  }\n};\nconst defaultUpdateInterval = INTERVAL_ID_TO_TYPE_MAPPING[\"0\"];\n\n// 图表字段映射\nconst CHART_KEY_NAME_MAPPING = {\n  cpu: \"CPU\",\n  memory: \"内存\",\n  disk: \"磁盘\"\n};\n\n// 仪表盘字段映射\nconst INSTRUMENT_BOARD_KEY_TO_NAME_MAPPING = {\n  cpu: \"CPU使用率\",\n  memory: \"内存使用率\"\n};\n\n// 服务器信息可修改字段\nconst CHANGEABLE_SERVER_FIELDS = [\"name\", \"remark\"];\n\nexport default {\n  name: \"Server\",\n  components: {\n    InstrumentBoard,\n    LineChart\n  },\n  data() {\n    return {\n      SERVER_KEY_TO_NAME_MAPPING,\n      INTERVAL_ID_TO_TYPE_MAPPING,\n      CHART_KEY_NAME_MAPPING,\n      CHANGEABLE_SERVER_FIELDS,\n      INSTRUMENT_BOARD_KEY_TO_NAME_MAPPING,\n      timeRange: [\n        `${moment().format(\"YYYY-MM-DD\")} 00:00:00`,\n        `${moment().format(\"YYYY-MM-DD\")} 23:59:59`\n      ],\n      // 加载层信息\n      loading: [],\n      // 所有服务器信息\n      allServerInfo: [],\n      // 当前展示的服务器名称\n      currentServerName: \"\",\n      // 当前展示的服务器信息\n      currentServer: {},\n      // 当前展示的服务器信息索引，更新服务器信息时用\n      currentServerIndex: 0,\n      // 开启监控控制按钮\n      isOpeningMonitor: false,\n      // 数据更新频率\n      monitorUpdateInterval: 60,\n      // 最小更新频率值\n      minMonitorUpdateInterval: 0,\n      // 更新频率类型\n      intervalType: defaultUpdateInterval.name,\n      // 更新频率单位对应秒\n      intervalTypeUnits: defaultUpdateInterval.second,\n      // 监控日志保存天数\n      monitorLogSavingDays: 30,\n      // 折线图数据\n      lineChartData: {},\n      // 仪表盘数据\n      instrumentBoardData: {}\n    };\n  },\n  computed: {\n    currentServerInfoKeys() {\n      return Object.keys(this.currentServer).filter(key => {\n        if (SERVER_KEY_TO_NAME_MAPPING[key]) {\n          return { [key]: SERVER_KEY_TO_NAME_MAPPING[key] };\n        }\n      });\n    },\n    intervalNameToSecondMapping() {\n      const intervalNameToSecondMapping = {};\n      Object.values(INTERVAL_ID_TO_TYPE_MAPPING).forEach(item => {\n        intervalNameToSecondMapping[item.name] = item.second;\n      });\n      return intervalNameToSecondMapping;\n    },\n    monitorStatusInfo() {\n      return {\n        enabled: this.isOpeningMonitor ? 1 : 0,\n        save_days: this.monitorLogSavingDays,\n        interval: this.monitorUpdateInterval * this.intervalTypeUnits\n      };\n    }\n  },\n  watch: {\n    currentServer(newServerInfo) {\n      if (newServerInfo) {\n        // 更新最新监控信息\n        this.getServerLatestLogInfo(newServerInfo.id);\n        // 获取监控日志信息\n        this.getCurrentServerMonitorLogs();\n      }\n    }\n  },\n  created() {\n    this.openLoading();\n    // 获取所有服务器信息\n    this.getServerList(this.currentServerIndex);\n    // 获取服务器监控频率设置\n    this.getMonitorStatusSettingsInfo();\n  },\n  methods: {\n    /** 查询所有服务器基础信息 */\n    getServerList(serverIndex) {\n      getServerList({ pageNum: \"all\" }).then(response => {\n        this.allServerInfo = response.data;\n        if (this.allServerInfo.length > 0) {\n          this.currentServer = this.allServerInfo[serverIndex || this.currentServerIndex];\n          this.currentServerName = this.currentServer.name || this.currentServer.ip;\n        }\n        this.loading.close();\n      });\n    },\n    /** 修改服务器信息*/\n    updateServerInfo() {\n      updateServerInfo(this.currentServer.id, this.currentServer).then(() => {\n        this.msgSuccess(\"修改服务器信息成功！\");\n      }).catch(error => {\n        this.$message.error(error.msg || \"提交修改服务器信息出错！\");\n      }).finally(() => {\n        this.getServerList();\n      });\n    },\n    /** 获取服务器最新监控信息 */\n    getServerLatestLogInfo(serverId) {\n      getServerLatestLog(serverId).then(results => {\n        this.instrumentBoardData = results.data;\n      }).catch(error => {\n        this.msgError(error.msg || \"获取服务器最新监控信息错误！\");\n      });\n    },\n    /** 获取监控日志信息 */\n    getCurrentServerMonitorLogs() {\n      getMonitorLogs(this.currentServer.id, { as: JSON.stringify({ \"create_datetime__range\": this.timeRange }) }).then(results => {\n        this.lineChartData = results.data;\n      }).catch(error => {\n        this.msgError(error.msg || \"获取监控日志信息出错误！\");\n      });\n    },\n\n    /** 清除监控日志 */\n    cleanMonitorLogsInfo() {\n      this.$confirm(\"此操作将删除所有的监控记录，是否继续？\", \"提示\", {\n        confirmButtonText: \"确定删除\",\n        cancelButtonText: \"放弃\"\n      }).then(() => {\n        cleanMonitorLog().then(results => {\n          this.msgSuccess(\"清除记录成功！\");\n        }).catch(error => {\n          this.$message.warning(error.msg || \"清除记录失败，请重试！\");\n        });\n      }).catch(() => {\n      });\n    },\n\n    /** 获取监控配置信息 */\n    getMonitorStatusSettingsInfo() {\n      getMonitorStatusInfo().then(results => {\n        const { enabled, interval, save_days } = results.data;\n        this.isOpeningMonitor = enabled;\n        this.monitorLogSavingDays = parseInt(save_days);\n        this.formatInterval(parseInt(interval));\n      }).catch(error => {\n        this.msgError(error.msg || \"获取服务器监控配置信息出错误！\");\n      });\n    },\n    /** 更新监控配置信息 */\n    updateMonitorStatusSettingsInfo() {\n      updateMonitorStatusInfo(this.monitorStatusInfo).then(() => {\n        this.msgSuccess(\"更新配置成功！\");\n      }).catch((error) => {\n        this.msgError(error.msg || \"更新服务器监控配置信息出错误！\");\n      });\n    },\n\n    // 打开加载层\n    openLoading() {\n      this.loading = this.$loading({\n        lock: true,\n        text: \"拼命读取中\",\n        spinner: \"el-icon-loading\",\n        background: \"rgba(0, 0, 0, 0.7)\"\n      });\n    },\n    // 选择展示的服务器信息\n    chooseServerInfo(index) {\n      this.currentServerIndex = index;\n      this.currentServer = this.allServerInfo[index];\n      this.currentServerName = this.currentServer.name || this.currentServer.ip;\n    },\n    // 更改更新频率（周期）数值\n    handleIntervalChange: debounce(function(value) {\n      this.monitorUpdateInterval = value;\n    }, 500),\n    // 选择更新频率（周期） 单位\n    selectIntervalType(value) {\n      this.intervalType = value;\n      this.intervalTypeUnits = this.intervalNameToSecondMapping[value];\n    },\n    // 修改监控状态\n    changeMonitorStatus(value) {\n      this.isOpeningMonitor = value;\n    },\n    // 监控周期时间转换\n    formatInterval(intervalTime) {\n      let biggerInterval = 0;\n      for (const interval of Object.values(INTERVAL_ID_TO_TYPE_MAPPING)) {\n        if (interval.second > biggerInterval && interval.second < intervalTime) {\n          biggerInterval = interval.second;\n          this.monitorUpdateInterval = intervalTime / interval.second;\n          this.intervalType = interval.name;\n          this.intervalTypeUnits = interval.second;\n        }\n      }\n    }\n  }\n};\n</script>\n<style scoped>\n.el-button--medium {\n  margin: 2px;\n  padding: 10px 10px;\n}\n\n.server-monitor-top {\n  padding: 10px 10px;\n  text-align: justify-all;\n  overflow-x: scroll;\n  display: flex;\n}\n\n.server-monitor-bottom {\n  text-align: left;\n  overflow-x: scroll;\n  display: flex;\n}\n\n.server-information {\n  width: 20%;\n  min-width: 400px;\n  min-height: 300px;\n  display: inline-block;\n}\n\n.information-instrument-panel {\n  width: 20%;\n  display: inline-block;\n  min-height: 300px;\n  min-width: 300px;\n  margin: 0 10px;\n}\n\n.server-info-item {\n  display: inline-block;\n  margin: 0 5px;\n}\n\n.server-info-detail {\n  min-height: 200px;\n}\n\n.server-info-detail-line {\n  margin: 5px;\n  min-height: 20px;\n}\n\n.server-info-detail-item {\n  text-align: justify;\n  line-height: 40px;\n  margin: 4px 0;\n  overflow: auto;\n}\n\n.server-monitor-control {\n  width: 100%;\n  height: 60px;\n  line-height: 60px;\n  padding: 0 20px;\n}\n\n.monitor-update-interval {\n  margin: 0 20px;\n}\n\n.same-block {\n  display: inline-block;\n}\n\n.monitor-update-interval-blank {\n  width: 100px;\n  margin: 0 2px;\n}\n\n.monitor-update-interval-unit {\n  width: 80px;\n  margin: 0 2px;\n}\n\n.monitor-log-save-time {\n  width: 280px;\n  margin: 0 2px;\n}\n\n.server-monitor-line-chart {\n  height: 400px;\n  width: 45%;\n  min-width: 500px;\n  margin: 10px;\n  display: inline-block;\n  overflow-x: scroll;\n}\n\n</style>\n"],"mappings":"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"}]}