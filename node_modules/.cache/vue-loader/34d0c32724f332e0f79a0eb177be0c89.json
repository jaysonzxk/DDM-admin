{"remainingRequest":"/Users/mac/Desktop/DDM-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mac/Desktop/DDM-admin/src/components/Modal/DetailFormDialog.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/mac/Desktop/DDM-admin/src/components/Modal/DetailFormDialog.vue","mtime":1702065174000},{"path":"/Users/mac/Desktop/DDM-admin/node_modules/cache-loader/dist/cjs.js","mtime":1703645363792},{"path":"/Users/mac/Desktop/DDM-admin/node_modules/babel-loader/lib/index.js","mtime":1703645364828},{"path":"/Users/mac/Desktop/DDM-admin/node_modules/cache-loader/dist/cjs.js","mtime":1703645363792},{"path":"/Users/mac/Desktop/DDM-admin/node_modules/vue-loader/lib/index.js","mtime":1703645365038}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IHBhcnNlVGltZSB9IGZyb20gIi4uLy4uL3V0aWxzL3J1b3lpIjsKCmNvbnN0IGxhYmVsVHlwZVRvRnVuY3Rpb24gPSB7CiAgdGltZTogKGl0ZW0sIGZvcm1EYXRhKSA9PiB7CiAgICByZXR1cm4gcGFyc2VUaW1lKGZvcm1EYXRhW2l0ZW0ua2V5XSk7CiAgfSwKICBib29sZWFuOiAoaXRlbSwgZm9ybURhdGEpID0+IHsKICAgIHJldHVybiBpdGVtLmxhYmVsQ2hvaWNlc1tmb3JtRGF0YVtpdGVtLmtleV1dOwogIH0KfTsKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiRGV0YWlsRm9ybURpYWxvZyIsCiAgcHJvcHM6IHsKICAgIGRpYWxvZ1RpdGxlOiB7IHR5cGU6IFN0cmluZywgcmVxdWlyZWQ6IHRydWUgfSwKICAgIG9wZW5EZXRhaWxNb2RhbDogeyB0eXBlOiBCb29sZWFuLCByZXF1aXJlZDogdHJ1ZSB9LAogICAgbW9kYWxXaWR0aDogeyB0eXBlOiBTdHJpbmcsIGRlZmF1bHQ6ICI3MjBweCIgfSwKICAgIGxhYmVsV2lkdGg6IHsgdHlwZTogU3RyaW5nLCBkZWZhdWx0OiAiMTAwcHgiIH0sCiAgICBmb3JtU2l6ZTogeyB0eXBlOiBTdHJpbmcsIGRlZmF1bHQ6ICJtaW5pIiB9LAogICAgZm9ybURhdGE6IHsgdHlwZTogT2JqZWN0LCBkZWZhdWx0OiB7fX0sCiAgICBmb3JtSXRlbTogeyB0eXBlOiBBcnJheSwgZGVmYXVsdDogW10gfQogIH0sCiAgbWV0aG9kczogewogICAgcGFyc2VGb3JtSXRlbUNvbnRlbnQoaXRlbSkgewogICAgICBjb25zdCBsYWJlbFR5cGUgPSBpdGVtLmxhYmVsVHlwZTsKICAgICAgaWYgKGxhYmVsVHlwZSkgewogICAgICAgIHJldHVybiBsYWJlbFR5cGVUb0Z1bmN0aW9uW2xhYmVsVHlwZV0oaXRlbSwgdGhpcy5mb3JtRGF0YSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybURhdGFbaXRlbS5rZXldOwogICAgICB9CiAgICB9LAogICAgY2xvc2VEZXRhaWxGb3JtRGlhbG9nKCkgewogICAgICB0aGlzLiRlbWl0KCJjbG9zZURpYWxvZyIsIGZhbHNlKTsKICAgIH0KICB9Cgp9Owo="},{"version":3,"sources":["DetailFormDialog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"DetailFormDialog.vue","sourceRoot":"src/components/Modal","sourcesContent":["<template>\n  <el-dialog\n    :title=\"dialogTitle\"\n    :visible=\"openDetailModal\"\n    :width=\"modalWidth\"\n    append-to-body\n    @close=\"closeDetailFormDialog\"\n  >\n    <el-form\n      ref=\"form\"\n      :model=\"formData\"\n      :label-width=\"labelWidth\"\n      :size=\"formSize\"\n    >\n      <el-row>\n        <template v-for=\"(item,index) in formItem\">\n          <el-col :key=\"index\" :span=\"item.singleLine? 24:12\">\n            <el-form-item :key=\"item.index\" :label=\"`${item.label}：`\">\n              <template v-if=\"item.customRender\">\n                <slot :name=\"item.key\" :item=\"item\" />\n              </template>\n              <template v-else>\n                {{ parseFormItemContent(item) }}\n              </template>\n            </el-form-item>\n          </el-col>\n        </template>\n      </el-row>\n    </el-form>\n    <div slot=\"footer\" class=\"dialog-footer\">\n      <el-button @click=\"closeDetailFormDialog\">关 闭</el-button>\n    </div>\n  </el-dialog>\n</template>\n\n<script>\nimport { parseTime } from \"../../utils/ruoyi\";\n\nconst labelTypeToFunction = {\n  time: (item, formData) => {\n    return parseTime(formData[item.key]);\n  },\n  boolean: (item, formData) => {\n    return item.labelChoices[formData[item.key]];\n  }\n};\n\nexport default {\n  name: \"DetailFormDialog\",\n  props: {\n    dialogTitle: { type: String, required: true },\n    openDetailModal: { type: Boolean, required: true },\n    modalWidth: { type: String, default: \"720px\" },\n    labelWidth: { type: String, default: \"100px\" },\n    formSize: { type: String, default: \"mini\" },\n    formData: { type: Object, default: {}},\n    formItem: { type: Array, default: [] }\n  },\n  methods: {\n    parseFormItemContent(item) {\n      const labelType = item.labelType;\n      if (labelType) {\n        return labelTypeToFunction[labelType](item, this.formData);\n      } else {\n        return this.formData[item.key];\n      }\n    },\n    closeDetailFormDialog() {\n      this.$emit(\"closeDialog\", false);\n    }\n  }\n\n};\n</script>\n\n<style scoped>\n\n</style>\n"]}]}