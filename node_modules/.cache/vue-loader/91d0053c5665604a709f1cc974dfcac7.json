{"remainingRequest":"/Users/jayson/Desktop/work/DDM-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jayson/Desktop/work/DDM-admin/src/views/admin/monitor/server/components/LineChart.vue?vue&type=style&index=0&id=f4998dc4&scoped=true&lang=css","dependencies":[{"path":"/Users/jayson/Desktop/work/DDM-admin/src/views/admin/monitor/server/components/LineChart.vue","mtime":1720245294021},{"path":"/Users/jayson/Desktop/work/DDM-admin/node_modules/css-loader/dist/cjs.js","mtime":1720245289027},{"path":"/Users/jayson/Desktop/work/DDM-admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1720245293567},{"path":"/Users/jayson/Desktop/work/DDM-admin/node_modules/postcss-loader/src/index.js","mtime":1720245291982},{"path":"/Users/jayson/Desktop/work/DDM-admin/node_modules/cache-loader/dist/cjs.js","mtime":1720245288376},{"path":"/Users/jayson/Desktop/work/DDM-admin/node_modules/vue-loader/lib/index.js","mtime":1720245293567}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5saW5lLWNoYXJ0LW5hbWUgewogIGZvbnQtd2VpZ2h0OiBib2xkZXI7CiAgd2lkdGg6IDIwJTsKICBtaW4td2lkdGg6IDMwcHg7CiAgdGV4dC1hbGlnbjogbGVmdDsKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7Cn0KCi5saW5lLWNoYXJ0LXRpbWUtcmFkaW8gewogIGZvbnQtd2VpZ2h0OiBib2xkZXI7CiAgd2lkdGg6IDgwJTsKICBtaW4td2lkdGg6IDIwMHB4OwogIHRleHQtYWxpZ246IHJpZ2h0OwogIGRpc3BsYXk6IGlubGluZS1ibG9jazsKfQoKLmxpbmUtY2hhcnQtYm9keSB7CiAgbWluLWhlaWdodDogMzAwcHg7CiAgbWluLXdpZHRoOiAzMDBweDsKfQo="},{"version":3,"sources":["LineChart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4KA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"LineChart.vue","sourceRoot":"src/views/admin/monitor/server/components","sourcesContent":["<template>\n  <div>\n    <div class=\"line-chart-title\">\n      <div class=\"line-chart-name\">{{ chartTitle }}</div>\n      <div class=\"line-chart-time-radio\">\n        <el-radio-group v-model=\"timeLimit\" @change=\"changeTimeLimit\">\n          <el-radio-button\n            v-for=\"item in Object.keys(TIME_LIMIT_SETTING)\"\n            :key=\"TIME_LIMIT_SETTING[item].key\"\n            :label=\"TIME_LIMIT_SETTING[item].name\"\n          />\n        </el-radio-group>\n      </div>\n    </div>\n    <div :id=\"lineChartId\" class=\"line-chart-body\" />\n  </div>\n</template>\n\n<script>\nimport VueTypes from \"vue-types\";\n// 引入基本模板,按需加载\nimport echarts from \"echarts\";\nimport moment from \"moment\";\nimport { getMonitorLogs } from \"@/api/admin/monitor/server\";\n\nconst TODAY = moment().format(\"YYYY-MM-DD\");\nconst YESTERDAY = moment().subtract(1, \"days\").format(\"YYYY-MM-DD\");\nconst LAST_SEVEN_DAYS = moment().subtract(7, \"days\").format(\"YYYY-MM-DD\");\nconst LAST_THIRTY_DAYS = moment().subtract(30, \"days\").format(\"YYYY-MM-DD\");\n\n// 时间段筛选配置\nconst TIME_LIMIT_SETTING = {\n  \"yesterday\": {\n    key: \"yesterday\",\n    name: \"昨天\",\n    timeRange: [\n      `${YESTERDAY} 00:00:00`,\n      `${YESTERDAY} 23:59:59`\n    ]\n  },\n  \"today\": {\n    key: \"today\",\n    name: \"今天\",\n    timeRange: [\n      `${TODAY} 00:00:00`,\n      `${TODAY} 23:59:59`\n    ]\n  },\n  \"latestWeek\": {\n    key: \"latestWeek\",\n    name: \"最近7天\",\n    timeRange: [\n      `${LAST_SEVEN_DAYS} 00:00:00`,\n      `${TODAY} 23:59:59`\n    ]\n  },\n  \"latestMonth\": {\n    key: \"latestMonth\",\n    name: \"最近30天\",\n    timeRange: [\n      `${LAST_THIRTY_DAYS} 00:00:00`,\n      `${TODAY} 23:59:59`\n    ]\n  }\n};\n// 默认显示时间\nconst DEFAULT_TIME = \"今天\";\n\nexport default {\n  name: \"LineChart\",\n  props: {\n    serverInfo: VueTypes.object.isRequired,\n    lineChartKey: VueTypes.string.isRequired,\n    chartTitle: VueTypes.string.isRequired,\n    chartData: VueTypes.array.isRequired,\n    chartTime: VueTypes.array.isRequired\n  },\n  data() {\n    return {\n      TIME_LIMIT_SETTING,\n      timeLimit: DEFAULT_TIME,\n      lineChartId: this.lineChartKey + \"Chart\",\n      lineChartData: this.chartData,\n      lineChartTime: this.chartTime\n    };\n  },\n  computed: {\n    timeLimitNames() {\n      return Object.keys(TIME_LIMIT_SETTING).map(item => {\n        return TIME_LIMIT_SETTING[item].name;\n      });\n    },\n    currentDateIndex() {\n      return this.timeLimitNames.indexOf(this.timeLimit);\n    },\n    currentTimeLimitSetting() {\n      return TIME_LIMIT_SETTING[Object.keys(TIME_LIMIT_SETTING)[this.currentDateIndex]];\n    }\n  },\n\n  mounted() {\n    this.drawBar();\n  },\n  methods: {\n    drawBar() {\n      // 基于dom，初始化echarts实例\n      const barGraph = echarts.init(document.getElementById(this.lineChartId));\n      // 绘制图表\n      barGraph.setOption({\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"cross\",\n            label: {\n              backgroundColor: \"#6a7985\"\n            }\n          }\n        },\n        legend: {\n          left: \"center\",\n          data: [],\n          bottom: 0\n        },\n        xAxis: {\n          type: \"category\",\n          name: \"x\",\n          splitLine: { show: false },\n          data: this.lineChartTime,\n          offset: 20\n        },\n        grid: {\n          left: \"1%\",\n          right: \"2%\",\n          bottom: \"8%\",\n          containLabel: true\n        },\n        yAxis: {\n          type: \"value\",\n          name: \"使用率\",\n          axisLabel: {\n            show: true,\n            interval: \"auto\",\n            formatter: \"{value}%\"\n          }\n        },\n        series: [\n          {\n            name: \"使用率\",\n            type: \"line\",\n            data: this.lineChartData\n          }\n        ]\n      });\n    },\n    changeTimeLimit(value) {\n      this.timeLimit = value;\n      this.getCurrentServerMonitorLogs();\n    },\n    getCurrentServerMonitorLogs() {\n      getMonitorLogs(this.serverInfo.id, { as: JSON.stringify({ create_datetime__range: this.currentTimeLimitSetting.timeRange }) }).then(results => {\n        this.lineChartData = results.data[this.lineChartKey];\n        this.lineChartTime = results.data[\"datetime\"];\n        this.drawBar();\n      }).catch(error => {\n        this.$message.warning(error.msg || `获取${this.chartTitle}数据失败！`);\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\n.line-chart-name {\n  font-weight: bolder;\n  width: 20%;\n  min-width: 30px;\n  text-align: left;\n  display: inline-block;\n}\n\n.line-chart-time-radio {\n  font-weight: bolder;\n  width: 80%;\n  min-width: 200px;\n  text-align: right;\n  display: inline-block;\n}\n\n.line-chart-body {\n  min-height: 300px;\n  min-width: 300px;\n}\n</style>\n"]}]}